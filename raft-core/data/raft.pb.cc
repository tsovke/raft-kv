// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: raft.proto
// Protobuf C++ Version: 5.27.2

#include "raft.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace raft {

inline constexpr VoteReply::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : term_{0},
        votegranted_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VoteReply::VoteReply(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VoteReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteReplyDefaultTypeInternal() {}
  union {
    VoteReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteReplyDefaultTypeInternal _VoteReply_default_instance_;

inline constexpr VoteArgs::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : term_{0},
        candidateid_{0},
        lastlogindex_{0},
        lastlogterm_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VoteArgs::VoteArgs(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VoteArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteArgsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteArgsDefaultTypeInternal() {}
  union {
    VoteArgs _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteArgsDefaultTypeInternal _VoteArgs_default_instance_;

inline constexpr Log::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : command_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        term_{0},
        index_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Log::Log(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogDefaultTypeInternal() {}
  union {
    Log _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogDefaultTypeInternal _Log_default_instance_;

inline constexpr AppendEntriesReply::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : term_{0},
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AppendEntriesReply::AppendEntriesReply(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AppendEntriesReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesReplyDefaultTypeInternal() {}
  union {
    AppendEntriesReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesReplyDefaultTypeInternal _AppendEntriesReply_default_instance_;

inline constexpr AppendEntriesArgs::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : entries_{},
        term_{0},
        leaderid_{0},
        prevlogindex_{0},
        prevlogterm_{0},
        leadercommit_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AppendEntriesArgs::AppendEntriesArgs(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AppendEntriesArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesArgsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesArgsDefaultTypeInternal() {}
  union {
    AppendEntriesArgs _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesArgsDefaultTypeInternal _AppendEntriesArgs_default_instance_;
}  // namespace raft
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_raft_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_raft_2eproto = nullptr;
const ::uint32_t
    TableStruct_raft_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::raft::Log, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::raft::Log, _impl_.term_),
        PROTOBUF_FIELD_OFFSET(::raft::Log, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::raft::Log, _impl_.command_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::raft::VoteArgs, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::raft::VoteArgs, _impl_.term_),
        PROTOBUF_FIELD_OFFSET(::raft::VoteArgs, _impl_.candidateid_),
        PROTOBUF_FIELD_OFFSET(::raft::VoteArgs, _impl_.lastlogindex_),
        PROTOBUF_FIELD_OFFSET(::raft::VoteArgs, _impl_.lastlogterm_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::raft::VoteReply, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::raft::VoteReply, _impl_.term_),
        PROTOBUF_FIELD_OFFSET(::raft::VoteReply, _impl_.votegranted_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesArgs, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesArgs, _impl_.term_),
        PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesArgs, _impl_.leaderid_),
        PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesArgs, _impl_.prevlogindex_),
        PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesArgs, _impl_.prevlogterm_),
        PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesArgs, _impl_.entries_),
        PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesArgs, _impl_.leadercommit_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesReply, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesReply, _impl_.term_),
        PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesReply, _impl_.success_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::raft::Log)},
        {11, -1, -1, sizeof(::raft::VoteArgs)},
        {23, -1, -1, sizeof(::raft::VoteReply)},
        {33, -1, -1, sizeof(::raft::AppendEntriesArgs)},
        {47, -1, -1, sizeof(::raft::AppendEntriesReply)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::raft::_Log_default_instance_._instance,
    &::raft::_VoteArgs_default_instance_._instance,
    &::raft::_VoteReply_default_instance_._instance,
    &::raft::_AppendEntriesArgs_default_instance_._instance,
    &::raft::_AppendEntriesReply_default_instance_._instance,
};
const char descriptor_table_protodef_raft_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\nraft.proto\022\004raft\"3\n\003Log\022\014\n\004term\030\001 \001(\005\022"
    "\r\n\005index\030\002 \001(\005\022\017\n\007command\030\003 \001(\t\"X\n\010VoteA"
    "rgs\022\014\n\004term\030\001 \001(\005\022\023\n\013candidateId\030\002 \001(\005\022\024"
    "\n\014lastLogIndex\030\003 \001(\005\022\023\n\013lastLogTerm\030\004 \001("
    "\005\".\n\tVoteReply\022\014\n\004term\030\001 \001(\005\022\023\n\013voteGran"
    "ted\030\002 \001(\010\"\220\001\n\021AppendEntriesArgs\022\014\n\004term\030"
    "\001 \001(\005\022\020\n\010leaderId\030\002 \001(\005\022\024\n\014prevLogIndex\030"
    "\003 \001(\005\022\023\n\013prevLogTerm\030\004 \001(\005\022\032\n\007entries\030\005 "
    "\003(\0132\t.raft.Log\022\024\n\014leaderCommit\030\006 \001(\005\"3\n\022"
    "AppendEntriesReply\022\014\n\004term\030\001 \001(\005\022\017\n\007succ"
    "ess\030\002 \001(\010b\006proto3"
};
static ::absl::once_flag descriptor_table_raft_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_raft_2eproto = {
    false,
    false,
    417,
    descriptor_table_protodef_raft_2eproto,
    "raft.proto",
    &descriptor_table_raft_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_raft_2eproto::offsets,
    file_level_enum_descriptors_raft_2eproto,
    file_level_service_descriptors_raft_2eproto,
};
namespace raft {
// ===================================================================

class Log::_Internal {
 public:
};

Log::Log(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft.Log)
}
inline PROTOBUF_NDEBUG_INLINE Log::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::raft::Log& from_msg)
      : command_(arena, from.command_),
        _cached_size_{0} {}

Log::Log(
    ::google::protobuf::Arena* arena,
    const Log& from)
    : ::google::protobuf::Message(arena) {
  Log* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, term_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, term_),
           offsetof(Impl_, index_) -
               offsetof(Impl_, term_) +
               sizeof(Impl_::index_));

  // @@protoc_insertion_point(copy_constructor:raft.Log)
}
inline PROTOBUF_NDEBUG_INLINE Log::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : command_(arena),
        _cached_size_{0} {}

inline void Log::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, term_),
           0,
           offsetof(Impl_, index_) -
               offsetof(Impl_, term_) +
               sizeof(Impl_::index_));
}
Log::~Log() {
  // @@protoc_insertion_point(destructor:raft.Log)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Log::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.command_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Log::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(Log, _impl_._cached_size_),
              false,
          },
          &Log::MergeImpl,
          &Log::kDescriptorMethods,
          &descriptor_table_raft_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 24, 2> Log::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Log_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::raft::Log>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 term = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Log, _impl_.term_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Log, _impl_.term_)}},
    // int32 index = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Log, _impl_.index_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Log, _impl_.index_)}},
    // string command = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Log, _impl_.command_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 term = 1;
    {PROTOBUF_FIELD_OFFSET(Log, _impl_.term_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 index = 2;
    {PROTOBUF_FIELD_OFFSET(Log, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string command = 3;
    {PROTOBUF_FIELD_OFFSET(Log, _impl_.command_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\10\0\0\7\0\0\0\0"
    "raft.Log"
    "command"
  }},
};

PROTOBUF_NOINLINE void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.Log)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.command_.ClearToEmpty();
  ::memset(&_impl_.term_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* Log::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.Log)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_term(), target);
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_index(), target);
  }

  // string command = 3;
  if (!this->_internal_command().empty()) {
    const std::string& _s = this->_internal_command();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "raft.Log.command");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.Log)
  return target;
}

::size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.Log)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string command = 3;
  if (!this->_internal_command().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_command());
  }

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_term());
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Log::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Log*>(&to_msg);
  auto& from = static_cast<const Log&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.Log)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  if (from._internal_term() != 0) {
    _this->_impl_.term_ = from._impl_.term_;
  }
  if (from._internal_index() != 0) {
    _this->_impl_.index_ = from._impl_.index_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Log::InternalSwap(Log* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.command_, &other->_impl_.command_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Log, _impl_.index_)
      + sizeof(Log::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(Log, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::google::protobuf::Metadata Log::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VoteArgs::_Internal {
 public:
};

VoteArgs::VoteArgs(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft.VoteArgs)
}
VoteArgs::VoteArgs(
    ::google::protobuf::Arena* arena, const VoteArgs& from)
    : VoteArgs(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VoteArgs::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VoteArgs::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, term_),
           0,
           offsetof(Impl_, lastlogterm_) -
               offsetof(Impl_, term_) +
               sizeof(Impl_::lastlogterm_));
}
VoteArgs::~VoteArgs() {
  // @@protoc_insertion_point(destructor:raft.VoteArgs)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VoteArgs::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
VoteArgs::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(VoteArgs, _impl_._cached_size_),
              false,
          },
          &VoteArgs::MergeImpl,
          &VoteArgs::kDescriptorMethods,
          &descriptor_table_raft_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> VoteArgs::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VoteArgs_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::raft::VoteArgs>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 lastLogTerm = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VoteArgs, _impl_.lastlogterm_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(VoteArgs, _impl_.lastlogterm_)}},
    // int32 term = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VoteArgs, _impl_.term_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VoteArgs, _impl_.term_)}},
    // int32 candidateId = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VoteArgs, _impl_.candidateid_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VoteArgs, _impl_.candidateid_)}},
    // int32 lastLogIndex = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VoteArgs, _impl_.lastlogindex_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(VoteArgs, _impl_.lastlogindex_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 term = 1;
    {PROTOBUF_FIELD_OFFSET(VoteArgs, _impl_.term_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 candidateId = 2;
    {PROTOBUF_FIELD_OFFSET(VoteArgs, _impl_.candidateid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 lastLogIndex = 3;
    {PROTOBUF_FIELD_OFFSET(VoteArgs, _impl_.lastlogindex_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 lastLogTerm = 4;
    {PROTOBUF_FIELD_OFFSET(VoteArgs, _impl_.lastlogterm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VoteArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.VoteArgs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.lastlogterm_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.lastlogterm_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* VoteArgs::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.VoteArgs)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_term(), target);
  }

  // int32 candidateId = 2;
  if (this->_internal_candidateid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_candidateid(), target);
  }

  // int32 lastLogIndex = 3;
  if (this->_internal_lastlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_lastlogindex(), target);
  }

  // int32 lastLogTerm = 4;
  if (this->_internal_lastlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_lastlogterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.VoteArgs)
  return target;
}

::size_t VoteArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.VoteArgs)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_term());
  }

  // int32 candidateId = 2;
  if (this->_internal_candidateid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_candidateid());
  }

  // int32 lastLogIndex = 3;
  if (this->_internal_lastlogindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lastlogindex());
  }

  // int32 lastLogTerm = 4;
  if (this->_internal_lastlogterm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lastlogterm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void VoteArgs::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VoteArgs*>(&to_msg);
  auto& from = static_cast<const VoteArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.VoteArgs)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_impl_.term_ = from._impl_.term_;
  }
  if (from._internal_candidateid() != 0) {
    _this->_impl_.candidateid_ = from._impl_.candidateid_;
  }
  if (from._internal_lastlogindex() != 0) {
    _this->_impl_.lastlogindex_ = from._impl_.lastlogindex_;
  }
  if (from._internal_lastlogterm() != 0) {
    _this->_impl_.lastlogterm_ = from._impl_.lastlogterm_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VoteArgs::CopyFrom(const VoteArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.VoteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VoteArgs::InternalSwap(VoteArgs* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteArgs, _impl_.lastlogterm_)
      + sizeof(VoteArgs::_impl_.lastlogterm_)
      - PROTOBUF_FIELD_OFFSET(VoteArgs, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::google::protobuf::Metadata VoteArgs::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VoteReply::_Internal {
 public:
};

VoteReply::VoteReply(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft.VoteReply)
}
VoteReply::VoteReply(
    ::google::protobuf::Arena* arena, const VoteReply& from)
    : VoteReply(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VoteReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VoteReply::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, term_),
           0,
           offsetof(Impl_, votegranted_) -
               offsetof(Impl_, term_) +
               sizeof(Impl_::votegranted_));
}
VoteReply::~VoteReply() {
  // @@protoc_insertion_point(destructor:raft.VoteReply)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VoteReply::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
VoteReply::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(VoteReply, _impl_._cached_size_),
              false,
          },
          &VoteReply::MergeImpl,
          &VoteReply::kDescriptorMethods,
          &descriptor_table_raft_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> VoteReply::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VoteReply_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::raft::VoteReply>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool voteGranted = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(VoteReply, _impl_.votegranted_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VoteReply, _impl_.votegranted_)}},
    // int32 term = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VoteReply, _impl_.term_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VoteReply, _impl_.term_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 term = 1;
    {PROTOBUF_FIELD_OFFSET(VoteReply, _impl_.term_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool voteGranted = 2;
    {PROTOBUF_FIELD_OFFSET(VoteReply, _impl_.votegranted_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.VoteReply)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.votegranted_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.votegranted_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* VoteReply::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.VoteReply)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_term(), target);
  }

  // bool voteGranted = 2;
  if (this->_internal_votegranted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_votegranted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.VoteReply)
  return target;
}

::size_t VoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.VoteReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_term());
  }

  // bool voteGranted = 2;
  if (this->_internal_votegranted() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void VoteReply::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VoteReply*>(&to_msg);
  auto& from = static_cast<const VoteReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.VoteReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_impl_.term_ = from._impl_.term_;
  }
  if (from._internal_votegranted() != 0) {
    _this->_impl_.votegranted_ = from._impl_.votegranted_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VoteReply::CopyFrom(const VoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.VoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VoteReply::InternalSwap(VoteReply* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteReply, _impl_.votegranted_)
      + sizeof(VoteReply::_impl_.votegranted_)
      - PROTOBUF_FIELD_OFFSET(VoteReply, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::google::protobuf::Metadata VoteReply::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AppendEntriesArgs::_Internal {
 public:
};

AppendEntriesArgs::AppendEntriesArgs(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft.AppendEntriesArgs)
}
inline PROTOBUF_NDEBUG_INLINE AppendEntriesArgs::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::raft::AppendEntriesArgs& from_msg)
      : entries_{visibility, arena, from.entries_},
        _cached_size_{0} {}

AppendEntriesArgs::AppendEntriesArgs(
    ::google::protobuf::Arena* arena,
    const AppendEntriesArgs& from)
    : ::google::protobuf::Message(arena) {
  AppendEntriesArgs* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, term_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, term_),
           offsetof(Impl_, leadercommit_) -
               offsetof(Impl_, term_) +
               sizeof(Impl_::leadercommit_));

  // @@protoc_insertion_point(copy_constructor:raft.AppendEntriesArgs)
}
inline PROTOBUF_NDEBUG_INLINE AppendEntriesArgs::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : entries_{visibility, arena},
        _cached_size_{0} {}

inline void AppendEntriesArgs::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, term_),
           0,
           offsetof(Impl_, leadercommit_) -
               offsetof(Impl_, term_) +
               sizeof(Impl_::leadercommit_));
}
AppendEntriesArgs::~AppendEntriesArgs() {
  // @@protoc_insertion_point(destructor:raft.AppendEntriesArgs)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AppendEntriesArgs::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AppendEntriesArgs::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_._cached_size_),
              false,
          },
          &AppendEntriesArgs::MergeImpl,
          &AppendEntriesArgs::kDescriptorMethods,
          &descriptor_table_raft_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2> AppendEntriesArgs::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AppendEntriesArgs_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::raft::AppendEntriesArgs>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 term = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AppendEntriesArgs, _impl_.term_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.term_)}},
    // int32 leaderId = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AppendEntriesArgs, _impl_.leaderid_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.leaderid_)}},
    // int32 prevLogIndex = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AppendEntriesArgs, _impl_.prevlogindex_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.prevlogindex_)}},
    // int32 prevLogTerm = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AppendEntriesArgs, _impl_.prevlogterm_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.prevlogterm_)}},
    // repeated .raft.Log entries = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.entries_)}},
    // int32 leaderCommit = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AppendEntriesArgs, _impl_.leadercommit_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.leadercommit_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 term = 1;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.term_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 leaderId = 2;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.leaderid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 prevLogIndex = 3;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.prevlogindex_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 prevLogTerm = 4;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.prevlogterm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .raft.Log entries = 5;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.entries_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 leaderCommit = 6;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.leadercommit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::raft::Log>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void AppendEntriesArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.AppendEntriesArgs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  ::memset(&_impl_.term_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.leadercommit_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.leadercommit_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* AppendEntriesArgs::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.AppendEntriesArgs)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_term(), target);
  }

  // int32 leaderId = 2;
  if (this->_internal_leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_leaderid(), target);
  }

  // int32 prevLogIndex = 3;
  if (this->_internal_prevlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_prevlogindex(), target);
  }

  // int32 prevLogTerm = 4;
  if (this->_internal_prevlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_prevlogterm(), target);
  }

  // repeated .raft.Log entries = 5;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_entries_size());
       i < n; i++) {
    const auto& repfield = this->_internal_entries().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            5, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // int32 leaderCommit = 6;
  if (this->_internal_leadercommit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_leadercommit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.AppendEntriesArgs)
  return target;
}

::size_t AppendEntriesArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.AppendEntriesArgs)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .raft.Log entries = 5;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_internal_entries()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_term());
  }

  // int32 leaderId = 2;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_leaderid());
  }

  // int32 prevLogIndex = 3;
  if (this->_internal_prevlogindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_prevlogindex());
  }

  // int32 prevLogTerm = 4;
  if (this->_internal_prevlogterm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_prevlogterm());
  }

  // int32 leaderCommit = 6;
  if (this->_internal_leadercommit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_leadercommit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AppendEntriesArgs::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AppendEntriesArgs*>(&to_msg);
  auto& from = static_cast<const AppendEntriesArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.AppendEntriesArgs)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entries()->MergeFrom(
      from._internal_entries());
  if (from._internal_term() != 0) {
    _this->_impl_.term_ = from._impl_.term_;
  }
  if (from._internal_leaderid() != 0) {
    _this->_impl_.leaderid_ = from._impl_.leaderid_;
  }
  if (from._internal_prevlogindex() != 0) {
    _this->_impl_.prevlogindex_ = from._impl_.prevlogindex_;
  }
  if (from._internal_prevlogterm() != 0) {
    _this->_impl_.prevlogterm_ = from._impl_.prevlogterm_;
  }
  if (from._internal_leadercommit() != 0) {
    _this->_impl_.leadercommit_ = from._impl_.leadercommit_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesArgs::CopyFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.AppendEntriesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AppendEntriesArgs::InternalSwap(AppendEntriesArgs* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.leadercommit_)
      + sizeof(AppendEntriesArgs::_impl_.leadercommit_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::google::protobuf::Metadata AppendEntriesArgs::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AppendEntriesReply::_Internal {
 public:
};

AppendEntriesReply::AppendEntriesReply(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft.AppendEntriesReply)
}
AppendEntriesReply::AppendEntriesReply(
    ::google::protobuf::Arena* arena, const AppendEntriesReply& from)
    : AppendEntriesReply(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AppendEntriesReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AppendEntriesReply::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, term_),
           0,
           offsetof(Impl_, success_) -
               offsetof(Impl_, term_) +
               sizeof(Impl_::success_));
}
AppendEntriesReply::~AppendEntriesReply() {
  // @@protoc_insertion_point(destructor:raft.AppendEntriesReply)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AppendEntriesReply::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AppendEntriesReply::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(AppendEntriesReply, _impl_._cached_size_),
              false,
          },
          &AppendEntriesReply::MergeImpl,
          &AppendEntriesReply::kDescriptorMethods,
          &descriptor_table_raft_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> AppendEntriesReply::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AppendEntriesReply_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::raft::AppendEntriesReply>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool success = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AppendEntriesReply, _impl_.success_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesReply, _impl_.success_)}},
    // int32 term = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AppendEntriesReply, _impl_.term_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesReply, _impl_.term_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 term = 1;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesReply, _impl_.term_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool success = 2;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesReply, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AppendEntriesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.AppendEntriesReply)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* AppendEntriesReply::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.AppendEntriesReply)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_term(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.AppendEntriesReply)
  return target;
}

::size_t AppendEntriesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.AppendEntriesReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_term());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AppendEntriesReply::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AppendEntriesReply*>(&to_msg);
  auto& from = static_cast<const AppendEntriesReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.AppendEntriesReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_impl_.term_ = from._impl_.term_;
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesReply::CopyFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AppendEntriesReply::InternalSwap(AppendEntriesReply* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesReply, _impl_.success_)
      + sizeof(AppendEntriesReply::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesReply, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::google::protobuf::Metadata AppendEntriesReply::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace raft
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_raft_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
