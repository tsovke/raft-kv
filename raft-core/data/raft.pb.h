// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: raft.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_raft_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_raft_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_raft_2eproto;
namespace raft {
class AppendEntriesArgs;
struct AppendEntriesArgsDefaultTypeInternal;
extern AppendEntriesArgsDefaultTypeInternal _AppendEntriesArgs_default_instance_;
class AppendEntriesReply;
struct AppendEntriesReplyDefaultTypeInternal;
extern AppendEntriesReplyDefaultTypeInternal _AppendEntriesReply_default_instance_;
class Log;
struct LogDefaultTypeInternal;
extern LogDefaultTypeInternal _Log_default_instance_;
class VoteArgs;
struct VoteArgsDefaultTypeInternal;
extern VoteArgsDefaultTypeInternal _VoteArgs_default_instance_;
class VoteReply;
struct VoteReplyDefaultTypeInternal;
extern VoteReplyDefaultTypeInternal _VoteReply_default_instance_;
}  // namespace raft
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace raft {

// ===================================================================


// -------------------------------------------------------------------

class VoteReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:raft.VoteReply) */ {
 public:
  inline VoteReply() : VoteReply(nullptr) {}
  ~VoteReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VoteReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline VoteReply(const VoteReply& from) : VoteReply(nullptr, from) {}
  inline VoteReply(VoteReply&& from) noexcept
      : VoteReply(nullptr, std::move(from)) {}
  inline VoteReply& operator=(const VoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteReply& operator=(VoteReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteReply* internal_default_instance() {
    return reinterpret_cast<const VoteReply*>(
        &_VoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(VoteReply& a, VoteReply& b) { a.Swap(&b); }
  inline void Swap(VoteReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoteReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VoteReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VoteReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VoteReply& from) { VoteReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VoteReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "raft.VoteReply"; }

 protected:
  explicit VoteReply(::google::protobuf::Arena* arena);
  VoteReply(::google::protobuf::Arena* arena, const VoteReply& from);
  VoteReply(::google::protobuf::Arena* arena, VoteReply&& from) noexcept
      : VoteReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // int32 term = 1;
  void clear_term() ;
  ::int32_t term() const;
  void set_term(::int32_t value);

  private:
  ::int32_t _internal_term() const;
  void _internal_set_term(::int32_t value);

  public:
  // bool voteGranted = 2;
  void clear_votegranted() ;
  bool votegranted() const;
  void set_votegranted(bool value);

  private:
  bool _internal_votegranted() const;
  void _internal_set_votegranted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:raft.VoteReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VoteReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VoteReply& from_msg);
    ::int32_t term_;
    bool votegranted_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class VoteArgs final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:raft.VoteArgs) */ {
 public:
  inline VoteArgs() : VoteArgs(nullptr) {}
  ~VoteArgs() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VoteArgs(
      ::google::protobuf::internal::ConstantInitialized);

  inline VoteArgs(const VoteArgs& from) : VoteArgs(nullptr, from) {}
  inline VoteArgs(VoteArgs&& from) noexcept
      : VoteArgs(nullptr, std::move(from)) {}
  inline VoteArgs& operator=(const VoteArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteArgs& operator=(VoteArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoteArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteArgs* internal_default_instance() {
    return reinterpret_cast<const VoteArgs*>(
        &_VoteArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(VoteArgs& a, VoteArgs& b) { a.Swap(&b); }
  inline void Swap(VoteArgs* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteArgs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoteArgs* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VoteArgs>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VoteArgs& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VoteArgs& from) { VoteArgs::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VoteArgs* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "raft.VoteArgs"; }

 protected:
  explicit VoteArgs(::google::protobuf::Arena* arena);
  VoteArgs(::google::protobuf::Arena* arena, const VoteArgs& from);
  VoteArgs(::google::protobuf::Arena* arena, VoteArgs&& from) noexcept
      : VoteArgs(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTermFieldNumber = 1,
    kCandidateIdFieldNumber = 2,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // int32 term = 1;
  void clear_term() ;
  ::int32_t term() const;
  void set_term(::int32_t value);

  private:
  ::int32_t _internal_term() const;
  void _internal_set_term(::int32_t value);

  public:
  // int32 candidateId = 2;
  void clear_candidateid() ;
  ::int32_t candidateid() const;
  void set_candidateid(::int32_t value);

  private:
  ::int32_t _internal_candidateid() const;
  void _internal_set_candidateid(::int32_t value);

  public:
  // int32 lastLogIndex = 3;
  void clear_lastlogindex() ;
  ::int32_t lastlogindex() const;
  void set_lastlogindex(::int32_t value);

  private:
  ::int32_t _internal_lastlogindex() const;
  void _internal_set_lastlogindex(::int32_t value);

  public:
  // int32 lastLogTerm = 4;
  void clear_lastlogterm() ;
  ::int32_t lastlogterm() const;
  void set_lastlogterm(::int32_t value);

  private:
  ::int32_t _internal_lastlogterm() const;
  void _internal_set_lastlogterm(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:raft.VoteArgs)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VoteArgs_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VoteArgs& from_msg);
    ::int32_t term_;
    ::int32_t candidateid_;
    ::int32_t lastlogindex_;
    ::int32_t lastlogterm_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class Log final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:raft.Log) */ {
 public:
  inline Log() : Log(nullptr) {}
  ~Log() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Log(
      ::google::protobuf::internal::ConstantInitialized);

  inline Log(const Log& from) : Log(nullptr, from) {}
  inline Log(Log&& from) noexcept
      : Log(nullptr, std::move(from)) {}
  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }
  inline Log& operator=(Log&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Log& default_instance() {
    return *internal_default_instance();
  }
  static inline const Log* internal_default_instance() {
    return reinterpret_cast<const Log*>(
        &_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Log& a, Log& b) { a.Swap(&b); }
  inline void Swap(Log* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Log* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Log* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Log>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Log& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Log& from) { Log::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Log* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "raft.Log"; }

 protected:
  explicit Log(::google::protobuf::Arena* arena);
  Log(::google::protobuf::Arena* arena, const Log& from);
  Log(::google::protobuf::Arena* arena, Log&& from) noexcept
      : Log(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCommandFieldNumber = 3,
    kTermFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // string command = 3;
  void clear_command() ;
  const std::string& command() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_command(Arg_&& arg, Args_... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* value);

  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(
      const std::string& value);
  std::string* _internal_mutable_command();

  public:
  // int32 term = 1;
  void clear_term() ;
  ::int32_t term() const;
  void set_term(::int32_t value);

  private:
  ::int32_t _internal_term() const;
  void _internal_set_term(::int32_t value);

  public:
  // int32 index = 2;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:raft.Log)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      24, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Log_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Log& from_msg);
    ::google::protobuf::internal::ArenaStringPtr command_;
    ::int32_t term_;
    ::int32_t index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:raft.AppendEntriesReply) */ {
 public:
  inline AppendEntriesReply() : AppendEntriesReply(nullptr) {}
  ~AppendEntriesReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AppendEntriesReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline AppendEntriesReply(const AppendEntriesReply& from) : AppendEntriesReply(nullptr, from) {}
  inline AppendEntriesReply(AppendEntriesReply&& from) noexcept
      : AppendEntriesReply(nullptr, std::move(from)) {}
  inline AppendEntriesReply& operator=(const AppendEntriesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesReply& operator=(AppendEntriesReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesReply* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesReply*>(
        &_AppendEntriesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(AppendEntriesReply& a, AppendEntriesReply& b) { a.Swap(&b); }
  inline void Swap(AppendEntriesReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AppendEntriesReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AppendEntriesReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AppendEntriesReply& from) { AppendEntriesReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AppendEntriesReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "raft.AppendEntriesReply"; }

 protected:
  explicit AppendEntriesReply(::google::protobuf::Arena* arena);
  AppendEntriesReply(::google::protobuf::Arena* arena, const AppendEntriesReply& from);
  AppendEntriesReply(::google::protobuf::Arena* arena, AppendEntriesReply&& from) noexcept
      : AppendEntriesReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // int32 term = 1;
  void clear_term() ;
  ::int32_t term() const;
  void set_term(::int32_t value);

  private:
  ::int32_t _internal_term() const;
  void _internal_set_term(::int32_t value);

  public:
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:raft.AppendEntriesReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AppendEntriesReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AppendEntriesReply& from_msg);
    ::int32_t term_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesArgs final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:raft.AppendEntriesArgs) */ {
 public:
  inline AppendEntriesArgs() : AppendEntriesArgs(nullptr) {}
  ~AppendEntriesArgs() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AppendEntriesArgs(
      ::google::protobuf::internal::ConstantInitialized);

  inline AppendEntriesArgs(const AppendEntriesArgs& from) : AppendEntriesArgs(nullptr, from) {}
  inline AppendEntriesArgs(AppendEntriesArgs&& from) noexcept
      : AppendEntriesArgs(nullptr, std::move(from)) {}
  inline AppendEntriesArgs& operator=(const AppendEntriesArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesArgs& operator=(AppendEntriesArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesArgs* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesArgs*>(
        &_AppendEntriesArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AppendEntriesArgs& a, AppendEntriesArgs& b) { a.Swap(&b); }
  inline void Swap(AppendEntriesArgs* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesArgs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesArgs* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AppendEntriesArgs>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AppendEntriesArgs& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AppendEntriesArgs& from) { AppendEntriesArgs::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AppendEntriesArgs* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "raft.AppendEntriesArgs"; }

 protected:
  explicit AppendEntriesArgs(::google::protobuf::Arena* arena);
  AppendEntriesArgs(::google::protobuf::Arena* arena, const AppendEntriesArgs& from);
  AppendEntriesArgs(::google::protobuf::Arena* arena, AppendEntriesArgs&& from) noexcept
      : AppendEntriesArgs(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntriesFieldNumber = 5,
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kPrevLogIndexFieldNumber = 3,
    kPrevLogTermFieldNumber = 4,
    kLeaderCommitFieldNumber = 6,
  };
  // repeated .raft.Log entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;

  public:
  void clear_entries() ;
  ::raft::Log* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField<::raft::Log>* mutable_entries();

  private:
  const ::google::protobuf::RepeatedPtrField<::raft::Log>& _internal_entries() const;
  ::google::protobuf::RepeatedPtrField<::raft::Log>* _internal_mutable_entries();
  public:
  const ::raft::Log& entries(int index) const;
  ::raft::Log* add_entries();
  const ::google::protobuf::RepeatedPtrField<::raft::Log>& entries() const;
  // int32 term = 1;
  void clear_term() ;
  ::int32_t term() const;
  void set_term(::int32_t value);

  private:
  ::int32_t _internal_term() const;
  void _internal_set_term(::int32_t value);

  public:
  // int32 leaderId = 2;
  void clear_leaderid() ;
  ::int32_t leaderid() const;
  void set_leaderid(::int32_t value);

  private:
  ::int32_t _internal_leaderid() const;
  void _internal_set_leaderid(::int32_t value);

  public:
  // int32 prevLogIndex = 3;
  void clear_prevlogindex() ;
  ::int32_t prevlogindex() const;
  void set_prevlogindex(::int32_t value);

  private:
  ::int32_t _internal_prevlogindex() const;
  void _internal_set_prevlogindex(::int32_t value);

  public:
  // int32 prevLogTerm = 4;
  void clear_prevlogterm() ;
  ::int32_t prevlogterm() const;
  void set_prevlogterm(::int32_t value);

  private:
  ::int32_t _internal_prevlogterm() const;
  void _internal_set_prevlogterm(::int32_t value);

  public:
  // int32 leaderCommit = 6;
  void clear_leadercommit() ;
  ::int32_t leadercommit() const;
  void set_leadercommit(::int32_t value);

  private:
  ::int32_t _internal_leadercommit() const;
  void _internal_set_leadercommit(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:raft.AppendEntriesArgs)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AppendEntriesArgs_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AppendEntriesArgs& from_msg);
    ::google::protobuf::RepeatedPtrField< ::raft::Log > entries_;
    ::int32_t term_;
    ::int32_t leaderid_;
    ::int32_t prevlogindex_;
    ::int32_t prevlogterm_;
    ::int32_t leadercommit_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Log

// int32 term = 1;
inline void Log::clear_term() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = 0;
}
inline ::int32_t Log::term() const {
  // @@protoc_insertion_point(field_get:raft.Log.term)
  return _internal_term();
}
inline void Log::set_term(::int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.Log.term)
}
inline ::int32_t Log::_internal_term() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.term_;
}
inline void Log::_internal_set_term(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = value;
}

// int32 index = 2;
inline void Log::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0;
}
inline ::int32_t Log::index() const {
  // @@protoc_insertion_point(field_get:raft.Log.index)
  return _internal_index();
}
inline void Log::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raft.Log.index)
}
inline ::int32_t Log::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void Log::_internal_set_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// string command = 3;
inline void Log::clear_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_.ClearToEmpty();
}
inline const std::string& Log::command() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:raft.Log.command)
  return _internal_command();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Log::set_command(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:raft.Log.command)
}
inline std::string* Log::mutable_command() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:raft.Log.command)
  return _s;
}
inline const std::string& Log::_internal_command() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.command_.Get();
}
inline void Log::_internal_set_command(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_.Set(value, GetArena());
}
inline std::string* Log::_internal_mutable_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.command_.Mutable( GetArena());
}
inline std::string* Log::release_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:raft.Log.command)
  return _impl_.command_.Release();
}
inline void Log::set_allocated_command(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.command_.IsDefault()) {
          _impl_.command_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.Log.command)
}

// -------------------------------------------------------------------

// VoteArgs

// int32 term = 1;
inline void VoteArgs::clear_term() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = 0;
}
inline ::int32_t VoteArgs::term() const {
  // @@protoc_insertion_point(field_get:raft.VoteArgs.term)
  return _internal_term();
}
inline void VoteArgs::set_term(::int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.VoteArgs.term)
}
inline ::int32_t VoteArgs::_internal_term() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.term_;
}
inline void VoteArgs::_internal_set_term(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = value;
}

// int32 candidateId = 2;
inline void VoteArgs::clear_candidateid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candidateid_ = 0;
}
inline ::int32_t VoteArgs::candidateid() const {
  // @@protoc_insertion_point(field_get:raft.VoteArgs.candidateId)
  return _internal_candidateid();
}
inline void VoteArgs::set_candidateid(::int32_t value) {
  _internal_set_candidateid(value);
  // @@protoc_insertion_point(field_set:raft.VoteArgs.candidateId)
}
inline ::int32_t VoteArgs::_internal_candidateid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.candidateid_;
}
inline void VoteArgs::_internal_set_candidateid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candidateid_ = value;
}

// int32 lastLogIndex = 3;
inline void VoteArgs::clear_lastlogindex() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lastlogindex_ = 0;
}
inline ::int32_t VoteArgs::lastlogindex() const {
  // @@protoc_insertion_point(field_get:raft.VoteArgs.lastLogIndex)
  return _internal_lastlogindex();
}
inline void VoteArgs::set_lastlogindex(::int32_t value) {
  _internal_set_lastlogindex(value);
  // @@protoc_insertion_point(field_set:raft.VoteArgs.lastLogIndex)
}
inline ::int32_t VoteArgs::_internal_lastlogindex() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lastlogindex_;
}
inline void VoteArgs::_internal_set_lastlogindex(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lastlogindex_ = value;
}

// int32 lastLogTerm = 4;
inline void VoteArgs::clear_lastlogterm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lastlogterm_ = 0;
}
inline ::int32_t VoteArgs::lastlogterm() const {
  // @@protoc_insertion_point(field_get:raft.VoteArgs.lastLogTerm)
  return _internal_lastlogterm();
}
inline void VoteArgs::set_lastlogterm(::int32_t value) {
  _internal_set_lastlogterm(value);
  // @@protoc_insertion_point(field_set:raft.VoteArgs.lastLogTerm)
}
inline ::int32_t VoteArgs::_internal_lastlogterm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lastlogterm_;
}
inline void VoteArgs::_internal_set_lastlogterm(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lastlogterm_ = value;
}

// -------------------------------------------------------------------

// VoteReply

// int32 term = 1;
inline void VoteReply::clear_term() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = 0;
}
inline ::int32_t VoteReply::term() const {
  // @@protoc_insertion_point(field_get:raft.VoteReply.term)
  return _internal_term();
}
inline void VoteReply::set_term(::int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.VoteReply.term)
}
inline ::int32_t VoteReply::_internal_term() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.term_;
}
inline void VoteReply::_internal_set_term(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = value;
}

// bool voteGranted = 2;
inline void VoteReply::clear_votegranted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.votegranted_ = false;
}
inline bool VoteReply::votegranted() const {
  // @@protoc_insertion_point(field_get:raft.VoteReply.voteGranted)
  return _internal_votegranted();
}
inline void VoteReply::set_votegranted(bool value) {
  _internal_set_votegranted(value);
  // @@protoc_insertion_point(field_set:raft.VoteReply.voteGranted)
}
inline bool VoteReply::_internal_votegranted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.votegranted_;
}
inline void VoteReply::_internal_set_votegranted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.votegranted_ = value;
}

// -------------------------------------------------------------------

// AppendEntriesArgs

// int32 term = 1;
inline void AppendEntriesArgs::clear_term() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = 0;
}
inline ::int32_t AppendEntriesArgs::term() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesArgs.term)
  return _internal_term();
}
inline void AppendEntriesArgs::set_term(::int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesArgs.term)
}
inline ::int32_t AppendEntriesArgs::_internal_term() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.term_;
}
inline void AppendEntriesArgs::_internal_set_term(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = value;
}

// int32 leaderId = 2;
inline void AppendEntriesArgs::clear_leaderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leaderid_ = 0;
}
inline ::int32_t AppendEntriesArgs::leaderid() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesArgs.leaderId)
  return _internal_leaderid();
}
inline void AppendEntriesArgs::set_leaderid(::int32_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesArgs.leaderId)
}
inline ::int32_t AppendEntriesArgs::_internal_leaderid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leaderid_;
}
inline void AppendEntriesArgs::_internal_set_leaderid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leaderid_ = value;
}

// int32 prevLogIndex = 3;
inline void AppendEntriesArgs::clear_prevlogindex() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prevlogindex_ = 0;
}
inline ::int32_t AppendEntriesArgs::prevlogindex() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesArgs.prevLogIndex)
  return _internal_prevlogindex();
}
inline void AppendEntriesArgs::set_prevlogindex(::int32_t value) {
  _internal_set_prevlogindex(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesArgs.prevLogIndex)
}
inline ::int32_t AppendEntriesArgs::_internal_prevlogindex() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prevlogindex_;
}
inline void AppendEntriesArgs::_internal_set_prevlogindex(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prevlogindex_ = value;
}

// int32 prevLogTerm = 4;
inline void AppendEntriesArgs::clear_prevlogterm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prevlogterm_ = 0;
}
inline ::int32_t AppendEntriesArgs::prevlogterm() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesArgs.prevLogTerm)
  return _internal_prevlogterm();
}
inline void AppendEntriesArgs::set_prevlogterm(::int32_t value) {
  _internal_set_prevlogterm(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesArgs.prevLogTerm)
}
inline ::int32_t AppendEntriesArgs::_internal_prevlogterm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prevlogterm_;
}
inline void AppendEntriesArgs::_internal_set_prevlogterm(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prevlogterm_ = value;
}

// repeated .raft.Log entries = 5;
inline int AppendEntriesArgs::_internal_entries_size() const {
  return _internal_entries().size();
}
inline int AppendEntriesArgs::entries_size() const {
  return _internal_entries_size();
}
inline void AppendEntriesArgs::clear_entries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entries_.Clear();
}
inline ::raft::Log* AppendEntriesArgs::mutable_entries(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:raft.AppendEntriesArgs.entries)
  return _internal_mutable_entries()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::raft::Log>* AppendEntriesArgs::mutable_entries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:raft.AppendEntriesArgs.entries)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_entries();
}
inline const ::raft::Log& AppendEntriesArgs::entries(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesArgs.entries)
  return _internal_entries().Get(index);
}
inline ::raft::Log* AppendEntriesArgs::add_entries() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::raft::Log* _add = _internal_mutable_entries()->Add();
  // @@protoc_insertion_point(field_add:raft.AppendEntriesArgs.entries)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::raft::Log>& AppendEntriesArgs::entries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:raft.AppendEntriesArgs.entries)
  return _internal_entries();
}
inline const ::google::protobuf::RepeatedPtrField<::raft::Log>&
AppendEntriesArgs::_internal_entries() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entries_;
}
inline ::google::protobuf::RepeatedPtrField<::raft::Log>*
AppendEntriesArgs::_internal_mutable_entries() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.entries_;
}

// int32 leaderCommit = 6;
inline void AppendEntriesArgs::clear_leadercommit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leadercommit_ = 0;
}
inline ::int32_t AppendEntriesArgs::leadercommit() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesArgs.leaderCommit)
  return _internal_leadercommit();
}
inline void AppendEntriesArgs::set_leadercommit(::int32_t value) {
  _internal_set_leadercommit(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesArgs.leaderCommit)
}
inline ::int32_t AppendEntriesArgs::_internal_leadercommit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leadercommit_;
}
inline void AppendEntriesArgs::_internal_set_leadercommit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leadercommit_ = value;
}

// -------------------------------------------------------------------

// AppendEntriesReply

// int32 term = 1;
inline void AppendEntriesReply::clear_term() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = 0;
}
inline ::int32_t AppendEntriesReply::term() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesReply.term)
  return _internal_term();
}
inline void AppendEntriesReply::set_term(::int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesReply.term)
}
inline ::int32_t AppendEntriesReply::_internal_term() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.term_;
}
inline void AppendEntriesReply::_internal_set_term(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = value;
}

// bool success = 2;
inline void AppendEntriesReply::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool AppendEntriesReply::success() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesReply.success)
  return _internal_success();
}
inline void AppendEntriesReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesReply.success)
}
inline bool AppendEntriesReply::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void AppendEntriesReply::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace raft


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_raft_2eproto_2epb_2eh
